name: Tests and Security Scan

on:
  workflow_dispatch:
  push:
    branches:
      - develop

jobs:
  setup:
    name: Setup environment
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Create and activate virtual environment
        working-directory: cc_backend
        run: |
          python -m venv .venv
          source .venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install --upgrade setuptools

      - name: Cache virtual environment
        uses: actions/cache@v4
        with:
          path: cc_backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('cc_backend/requirements.txt') }}
          restore-keys: |
            venv-${{ runner.os }}-

  static-code-analysis-backend:
    name: Static Code Analysis Backend
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cached virtual environment
        uses: actions/cache@v4
        with:
          path: cc_backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('cc_backend/requirements.txt') }}

      - name: Run ESLint
        working-directory: cc_backend
        run: |
          source .venv/bin/activate
          pip install pylint
          pylint cc_backend

  static-code-analysis-frontend:
    name: Static Code Analysis Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: cc_webapp
        run: npm install

      - name: Run ESLint
        working-directory: cc_webapp
        run: npm run lint

  unit-tests:
    name: Run backend unit tests
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cached virtual environment
        uses: actions/cache@v4
        with:
          path: cc_backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('cc_backend/requirements.txt') }}

      - name: Run Tests
        working-directory: cc_backend
        run: |
          source .venv/bin/activate
          python manage.py test

  security-scan:
    name: Run security scan
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cached virtual environment
        uses: actions/cache@v4
        with:
          path: cc_backend/.venv
          key: venv-${{ runner.os }}-${{ hashFiles('cc_backend/requirements.txt') }}

      - name: Security scan (pip-audit)
        working-directory: cc_backend
        run: |
          source .venv/bin/activate
          pip install pip-audit
          pip-audit --strict

      - name: Install Syft (SBOM generation)
        working-directory: cc_backend
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh

      - name: Generate SBOM
        working-directory: cc_backend
        run: ./bin/syft . --exclude './bin' -o cyclonedx-json > sbom.json

      - name: Install Grype (for vulnerability scanning)
        working-directory: cc_backend
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh

      - name: Scan for vulnerabilities (using Grype)
        working-directory: cc_backend
        run: ./bin/grype sbom:sbom.json --fail-on high